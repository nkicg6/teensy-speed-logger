#+TITLE: teensy-speed-logger
#+AUTHOR: Nick George
#+email: nicholas.george32@gmail.com

* Description

A simple microcontroller based speedometer and distance logger. 

* Materials

- [[https://www.pjrc.com/store/teensy32.html][Teensy 3.2]] or comparable arduino-like microcontroller development board.
- [[https://www.amazon.com/gp/product/B00488G6P8/ref=oh_aui_detailpage_o00_s00?ie=UTF8&psc=1][SD card]] (data logging)
- [[https://www.sparkfun.com/products/544][SD card breakout]] (unless your development board comes with one)
- [[https://www.velleman.eu/products/view/?id=435540][Hall sensor/switch]] I link the the Velleman one here, but any hall sensor will do.
- /FUTURE FEATURE/  [[https://www.velleman.eu/products/view/?id=435516][real time clock]] for keeping time in logs (again, my local store sells velleman parts, which are generally pretty good)

* About

Written to log data from small treadmills for animal based behavior experiments. 

** Wiring

Connect the SD card as described [[http://nickgeorge.net/projects/greenhouse_project/][here]]. 

Quick fritzing diagram below:

[[file:docs/img/teensy-speed-logger_bb-new.png]]


** Useage

#+BEGIN_SRC c++
  const int on_off_pin = 14;
  const int hall = 8; // hall sensor
  const int resolution = 10; // how often to update state. 
  uint32_t readTime;
  volatile bool on_off_switch = false; // switch for activating a session
  const byte debounceTime = 100; // debouncing time for on-off button
  const byte indicatorLed = 7; // indicator led
#+END_SRC

Change these constants depending on your setup and needs.

=hall= is the pin your hall sensor is connected to. This should be digital. 

=resolution= is the ms delay between each loop. this will need to change to be compatible with the SD card write time. 

=on_off_switch= switch to start and stop experiments, do not change. 

=debounceTime= is there to control for hall sensor double hits.

=indicatorLed= if you want an indicator to tell you whether it is off or on. 

this software should compile with the arduino ide or [[http://platformio.org/][platformio]]. I have instructions on my website for using [[http://nickgeorge.net/notes/platformio_emcas/][platformio with Emacs]] if you are interested.

*** Startup

    When you plug in the system to power, you will see the on-board led light up once. This is the system checking the SD card, creating the file, and writing the header. The indicator LED should then flash twice then turn off. This means that the system is ready to go. Now just switch "on" the switch and you are ready to record. Every time you move the switch, you will see that a =---= is printed in the SD card file. This indicates a new session. 

*** TODO Python analysis script. 

When plugged into a computer (likely a dedicated raspberry pi) and sensing a serial connection, the python script will read the SD card data, date stamp it, divide it into session, and re-save the file as a different name along with charts and session data. This ensures that your sessions stay organized and the Arduino code stays as simple and fast as possible.

*** TODO Fix on off button and state sensing. 

* Future improvements

1. make serial.println into write functions to write to SD card. 
2. R or python analysis script with standard output. Could trigger a raspberry pi to run it upon shutting off the experiment. 
3. API for experiment configuration (for example, set header for csv log file programmatically before experiments)
4. web interface client (likely python-flask based with a raspberry pi server)
5. real time plotting on web interface
6. camera trigger (trigger a raspberry pi camera to start recording via simple GPIO pulse)

Let me know any other ideas!

